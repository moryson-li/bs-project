{"remainingRequest":"/home/moryson/Desktop/mushikago/vue-admin-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/moryson/Desktop/mushikago/vue-admin-template/src/views/ProcessTree/index.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/home/moryson/Desktop/mushikago/vue-admin-template/src/views/ProcessTree/index.vue","mtime":1650942081813},{"path":"/home/moryson/Desktop/mushikago/vue-admin-template/node_modules/css-loader/dist/cjs.js","mtime":1650942602836},{"path":"/home/moryson/Desktop/mushikago/vue-admin-template/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1650942605432},{"path":"/home/moryson/Desktop/mushikago/vue-admin-template/node_modules/postcss-loader/src/index.js","mtime":1650942603568},{"path":"/home/moryson/Desktop/mushikago/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":1650942601504},{"path":"/home/moryson/Desktop/mushikago/vue-admin-template/node_modules/vue-loader/lib/index.js","mtime":1650942604480}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi5ub2RlIGNpcmNsZSB7CiAgZmlsbDogI2ZmZjsKICBzdHJva2U6IHN0ZWVsYmx1ZTsKICBzdHJva2Utd2lkdGg6IDNweDsKfQoKLm5vZGUgdGV4dCB7IGZvbnQ6IDEycHggc2Fucy1zZXJpZjsgfQoKLm5vZGUtLWludGVybmFsIHRleHQgewogIHRleHQtc2hhZG93OiAwIDFweCAwICNmZmYsIDAgLTFweCAwICNmZmYsIDFweCAwIDAgI2ZmZiwgLTFweCAwIDAgI2ZmZjsKfQoKLmxpbmsgewogIGZpbGw6IG5vbmU7CiAgc3Ryb2tlOiAjY2NjOwogIHN0cm9rZS13aWR0aDogMnB4Owp9Cgo="},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgHA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/ProcessTree","sourcesContent":["<template>\n  <div id=\"processtree\"/>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\nexport default {\n  data() {\n    return {\n      treeData: []\n    }\n  },\n  mounted() {\n    this.create()\n  },\n  methods: {\n    create() {\n      var margin = { top: 60, right: 270, bottom: 90, left: 270 }\n      const width = 4000 - margin.left - margin.right\n      const height = 2000 - margin.top - margin.bottom\n      // declares a tree layout and assigns the size\n      var treemap = d3.tree()\n        .size([height, width])\n      // load the external data\n      d3.csv('attack_tree.csv')\n        .then(function(csvData) { //.then(function(treeData)\n        var treeData = d3.stratify()\n             .id(function(d) { return d.name; })\n             .parentId(function(d) { return d.parent; })(csvData)\n\t    treeData.each(function(d) {\n             d.name = d.id;\n\t    })\n\tvar nodes = d3.hierarchy(treeData, function(d) {\n          return d.children\n        })\n\n        // maps the node data to the tree layout\n        nodes = treemap(nodes)\n\n        // append the svg object to the body of the page\n        // appends a 'group' element to 'svg'\n        // moves the 'group' element to the top left margin\n        var svg = d3\n           .select('#processtree')\n           .append('svg')\n           .attr('width', width + margin.left + margin.right)\n           .attr('height', height + margin.top + margin.bottom)\n           .attr('cursor', 'grab')\n           .attr('position', 'relative')\n        var g = svg.append('g')\n           .attr('transform', 'translate(' + margin.left + ', ' + margin.top + ')')\n     //\"svg\"にZoomイベントを設定\n      var zoom = d3.zoom()\n        .scaleExtent([1/4,4])\n        .on('zoom', SVGzoomed);\n \n      svg.call(zoom);\n \n      //\"svg\"上に\"g\"をappendしてdragイベントを設定\n      var g = svg.append(\"g\")\n        .call(d3.drag()\n        .on('drag',SVGdragged))\n \n      function SVGzoomed(event) {\n        g.attr(\"transform\", event.transform);\n      }\n       function SVGdragged(event,d) {\n     d3.select(this).attr('cx', d.x = event.x).attr('cy', d.y = event.y);\n        };\n\n  // adds the links between the nodes\n  var link = g.selectAll('.link')\n    .data(nodes.descendants().slice(1))\n    .enter().append('path')\n    .attr('class', 'link')\n    .attr('d', function(d) {\n       return 'M' + d.y + ',' + d.x + 'C' + (d.y + d.parent.y) / 2 + ',' + d.x + ' ' + (d.y + d.parent.y) / 2 + ',' + d.parent.x + ' ' + d.parent.y + ',' + d.parent.x\n       })\n\n  // adds each node as a group\n  var node = g.selectAll('.node')\n    .data(nodes.descendants())\n    .enter().append('g')\n    .attr('class', function(d) {\n      return 'node' + (d.children ? ' node--internal' : ' node--leaf')\n    })\n    .attr('transform', function(d) {\n      return 'translate(' + d.y + ',' + d.x + ')'\n    })\n\n  // adds the circle to the node\n  node.append('circle')\n    .attr('r', 10)\n\n  // adds the text to the node\n  node.append('text')\n    .attr('dy', '.35em')\n    .attr('x', function(d) { return d.children ? -13 : 13 })\n    .style('text-anchor', function(d) {\n    return d.children ? 'end' : 'start'\n    })\n    .text(function(d) { return d.data.name })\n   })\n  }\n }\n}\n    \n</script>\n\n<style>\n\n.node circle {\n  fill: #fff;\n  stroke: steelblue;\n  stroke-width: 3px;\n}\n\n.node text { font: 12px sans-serif; }\n\n.node--internal text {\n  text-shadow: 0 1px 0 #fff, 0 -1px 0 #fff, 1px 0 0 #fff, -1px 0 0 #fff;\n}\n\n.link {\n  fill: none;\n  stroke: #ccc;\n  stroke-width: 2px;\n}\n\n</style>\n"]}]}