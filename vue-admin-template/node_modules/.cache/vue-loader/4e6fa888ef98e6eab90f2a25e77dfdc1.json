{"remainingRequest":"/home/moryson/Desktop/project/vue-admin-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/moryson/Desktop/project/vue-admin-template/src/views/ProcessTree/index.vue?vue&type=script&lang=js&","dependencies":[{"path":"/home/moryson/Desktop/project/vue-admin-template/src/views/ProcessTree/index.vue","mtime":1652806033901},{"path":"/home/moryson/Desktop/project/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":1650942601504},{"path":"/home/moryson/Desktop/project/vue-admin-template/node_modules/babel-loader/lib/index.js","mtime":1650942603644},{"path":"/home/moryson/Desktop/project/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":1650942601504},{"path":"/home/moryson/Desktop/project/vue-admin-template/node_modules/vue-loader/lib/index.js","mtime":1650942604480}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCAqIGFzIGQzIGZyb20gJ2QzJwoKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBpbmRleDogMCwKICAgICAgZHVyYXRpb246IDc1MCwKICAgICAgcm9vdDogbnVsbCwKICAgICAgbm9kZXM6IFtdLAogICAgICBsaW5rczogW10sCiAgICAgIGRUcmVlRGF0YTogbnVsbCwKICAgICAgbWFyZ2luOiB7dG9wOiAyMCwgcmlnaHQ6IDkwLCBib3R0b206IDMwLCBsZWZ0OiAxMDB9LAogICAgICBzZWxlY3RlZE5vZGU6IG51bGwsCiAgICAgIHN2ZzogbnVsbCwKICAgICAgY29udGFpbmVyOiBudWxsCiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgbGV0IHRyZWVEYXRhID0gewogICAgICAnbmFtZSc6ICdmbGFyZScsCiAgICAgICdjaGlsZHJlbic6IFsKICAgICAgICB7CiAgICAgICAgICAnbmFtZSc6ICdhbmltYXRlJywKICAgICAgICAgICdjaGlsZHJlbic6IFsKICAgICAgICAgICAgeyduYW1lJzogJ0Vhc2luZycsICd2YWx1ZSc6IDE3MDEwfSwKICAgICAgICAgICAgeyduYW1lJzogJ0Z1bmN0aW9uU2VxdWVuY2UnLCAndmFsdWUnOiA1ODQyfSwKICAgICAgICAgICAgewogICAgICAgICAgICAgICduYW1lJzogJ2ludGVycG9sYXRlJywKICAgICAgICAgICAgICAnY2hpbGRyZW4nOiBbCiAgICAgICAgICAgICAgICB7J25hbWUnOiAnQXJyYXlJbnRlcnBvbGF0b3InLCAndmFsdWUnOiAxOTgzfSwKICAgICAgICAgICAgICAgIHsnbmFtZSc6ICdDb2xvckludGVycG9sYXRvcicsICd2YWx1ZSc6IDIwNDd9LAogICAgICAgICAgICAgICAgeyduYW1lJzogJ0RhdGVJbnRlcnBvbGF0b3InLCAndmFsdWUnOiAxMzc1fSwKICAgICAgICAgICAgICAgIHsnbmFtZSc6ICdJbnRlcnBvbGF0b3InLCAndmFsdWUnOiA4NzQ2fSwKICAgICAgICAgICAgICAgIHsnbmFtZSc6ICdNYXRyaXhJbnRlcnBvbGF0b3InLCAndmFsdWUnOiAyMjAyfSwKICAgICAgICAgICAgICAgIHsnbmFtZSc6ICdOdW1iZXJJbnRlcnBvbGF0b3InLCAndmFsdWUnOiAxMzgyfSwKICAgICAgICAgICAgICAgIHsnbmFtZSc6ICdPYmplY3RJbnRlcnBvbGF0b3InLCAndmFsdWUnOiAxNjI5fSwKICAgICAgICAgICAgICAgIHsnbmFtZSc6ICdQb2ludEludGVycG9sYXRvcicsICd2YWx1ZSc6IDE2NzV9LAogICAgICAgICAgICAgICAgeyduYW1lJzogJ1JlY3RhbmdsZUludGVycG9sYXRvcicsICd2YWx1ZSc6IDIwNDJ9CiAgICAgICAgICAgICAgXQogICAgICAgICAgICB9LAogICAgICAgICAgICB7J25hbWUnOiAnSVNjaGVkdWxhYmxlJywgJ3ZhbHVlJzogMTA0MX0sCiAgICAgICAgICAgIHsnbmFtZSc6ICdQYXJhbGxlbCcsICd2YWx1ZSc6IDUxNzZ9LAogICAgICAgICAgICB7J25hbWUnOiAnUGF1c2UnLCAndmFsdWUnOiA0NDl9LAogICAgICAgICAgICB7J25hbWUnOiAnU2NoZWR1bGVyJywgJ3ZhbHVlJzogNTU5M30sCiAgICAgICAgICAgIHsnbmFtZSc6ICdTZXF1ZW5jZScsICd2YWx1ZSc6IDU1MzR9LAogICAgICAgICAgICB7J25hbWUnOiAnVHJhbnNpdGlvbicsICd2YWx1ZSc6IDkyMDF9LAogICAgICAgICAgICB7J25hbWUnOiAnVHJhbnNpdGlvbmVyJywgJ3ZhbHVlJzogMTk5NzV9LAogICAgICAgICAgICB7J25hbWUnOiAnVHJhbnNpdGlvbkV2ZW50JywgJ3ZhbHVlJzogMTExNn0sCiAgICAgICAgICAgIHsnbmFtZSc6ICdUd2VlbicsICd2YWx1ZSc6IDYwMDZ9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAnbmFtZSc6ICdkaXNwbGF5JywKICAgICAgICAgICdjaGlsZHJlbic6IFsKICAgICAgICAgICAgeyduYW1lJzogJ0RpcnR5U3ByaXRlJywgJ3ZhbHVlJzogODgzM30sCiAgICAgICAgICAgIHsnbmFtZSc6ICdMaW5lU3ByaXRlJywgJ3ZhbHVlJzogMTczMn0sCiAgICAgICAgICAgIHsnbmFtZSc6ICdSZWN0U3ByaXRlJywgJ3ZhbHVlJzogMzYyM30sCiAgICAgICAgICAgIHsnbmFtZSc6ICdUZXh0U3ByaXRlJywgJ3ZhbHVlJzogMTAwNjZ9CiAgICAgICAgICBdCiAgICAgICAgfSwKICAgICAgICB7CiAgICAgICAgICAnbmFtZSc6ICdmbGV4JywKICAgICAgICAgICdjaGlsZHJlbic6IFsKICAgICAgICAgICAgeyduYW1lJzogJ0ZsYXJlVmlzJywgJ3ZhbHVlJzogNDExNn0KICAgICAgICAgIF0KICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICduYW1lJzogJ3BoeXNpY3MnLAogICAgICAgICAgJ2NoaWxkcmVuJzogWwogICAgICAgICAgICB7J25hbWUnOiAnRHJhZ0ZvcmNlJywgJ3ZhbHVlJzogMTA4Mn0sCiAgICAgICAgICAgIHsnbmFtZSc6ICdHcmF2aXR5Rm9yY2UnLCAndmFsdWUnOiAxMzM2fSwKICAgICAgICAgICAgeyduYW1lJzogJ0lGb3JjZScsICd2YWx1ZSc6IDMxOX0sCiAgICAgICAgICAgIHsnbmFtZSc6ICdOQm9keUZvcmNlJywgJ3ZhbHVlJzogMTA0OTh9LAogICAgICAgICAgICB7J25hbWUnOiAnUGFydGljbGUnLCAndmFsdWUnOiAyODIyfSwKICAgICAgICAgICAgeyduYW1lJzogJ1NpbXVsYXRpb24nLCAndmFsdWUnOiA5OTgzfSwKICAgICAgICAgICAgeyduYW1lJzogJ1NwcmluZycsICd2YWx1ZSc6IDIyMTN9LAogICAgICAgICAgICB7J25hbWUnOiAnU3ByaW5nRm9yY2UnLCAndmFsdWUnOiAxNjgxfQogICAgICAgICAgXQogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgJ25hbWUnOiAnc2NhbGUnLAogICAgICAgICAgJ2NoaWxkcmVuJzogWwogICAgICAgICAgICB7J25hbWUnOiAnSVNjYWxlTWFwJywgJ3ZhbHVlJzogMjEwNX0sCiAgICAgICAgICAgIHsnbmFtZSc6ICdMaW5lYXJTY2FsZScsICd2YWx1ZSc6IDEzMTZ9LAogICAgICAgICAgICB7J25hbWUnOiAnTG9nU2NhbGUnLCAndmFsdWUnOiAzMTUxfSwKICAgICAgICAgICAgeyduYW1lJzogJ09yZGluYWxTY2FsZScsICd2YWx1ZSc6IDM3NzB9LAogICAgICAgICAgICB7J25hbWUnOiAnUXVhbnRpbGVTY2FsZScsICd2YWx1ZSc6IDI0MzV9LAogICAgICAgICAgICB7J25hbWUnOiAnUXVhbnRpdGF0aXZlU2NhbGUnLCAndmFsdWUnOiA0ODM5fSwKICAgICAgICAgICAgeyduYW1lJzogJ1Jvb3RTY2FsZScsICd2YWx1ZSc6IDE3NTZ9LAogICAgICAgICAgICB7J25hbWUnOiAnU2NhbGUnLCAndmFsdWUnOiA0MjY4fSwKICAgICAgICAgICAgeyduYW1lJzogJ1NjYWxlVHlwZScsICd2YWx1ZSc6IDE4MjF9LAogICAgICAgICAgICB7J25hbWUnOiAnVGltZVNjYWxlJywgJ3ZhbHVlJzogNTgzM30KICAgICAgICAgIF0KICAgICAgICB9CiAgICAgIF0KICAgIH0KICAgIHRoaXMuaW5pdFN2Zyh0cmVlRGF0YSkKICB9LAogIGNvbXB1dGVkOiB7CiAgICB0cmVlbWFwKCkgewogICAgICByZXR1cm4gZDMudHJlZSgpLm5vZGVTaXplKFszMCwgNjBdKQogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgaW5pdFN2Zyh0cmVlRGF0YSkgewogICAgICBsZXQgY2xpZW50V2lkdGggPSBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoCiAgICAgIGxldCBjbGllbnRIZWlnaHQgPSBkb2N1bWVudC5ib2R5LmNsaWVudEhlaWdodAogICAgICB0aGlzLndpZHRoID0gTWF0aC5mbG9vcihjbGllbnRXaWR0aCAqIDAuNikKICAgICAgdGhpcy5oZWlnaHQgPSBjbGllbnRIZWlnaHQgLSA3MgogICAgICBsZXQgbWFyZ2luID0gKHt0b3A6IDEwLCByaWdodDogMTIwLCBib3R0b206IDEwLCBsZWZ0OiAxMDB9KQogICAgICBsZXQgd2lkdGggPSB0aGlzLndpZHRoCiAgICAgIC8vIGxldCBkeSA9IHdpZHRoIC8gNAogICAgICBsZXQgZHggPSAzMAogICAgICB0aGlzLnN2ZyA9IGQzCiAgICAgICAgLnNlbGVjdCgnc3ZnLmQzLXRyZWUtdmlpJykKICAgICAgICAuYXR0cigndmlld0JveCcsIFstbWFyZ2luLmxlZnQsIC1tYXJnaW4udG9wLCB3aWR0aCwgZHhdKQogICAgICBsZXQgdHJhbnNsYXRlVG9wID0gKHRoaXMuaGVpZ2h0IC0gMTIwKSAvIDIKICAgICAgbGV0IHRyYW5zZm9ybSA9IGQzLnpvb21JZGVudGl0eQogICAgICAgIC50cmFuc2xhdGUodGhpcy5tYXJnaW4ubGVmdCwgdHJhbnNsYXRlVG9wKQogICAgICAgIC5zY2FsZSgxKQogICAgICBjb25zb2xlLmxvZyh0cmFuc2Zvcm0pIC8vIGVzbGludC1kaXNhYmxlLWxpbmUKICAgICAgdGhpcy5jb250YWluZXIgPSB0aGlzLnN2Zy5zZWxlY3QoJ2cuY29udGFpbmVyJykKICAgICAgLy8gaW5pdCB6b29tIGJlaGF2aW9yLCB3aGljaCBpcyBib3RoIGFuIG9iamVjdCBhbmQgZnVuY3Rpb24KICAgICAgbGV0IHpvb20gPSBkMwogICAgICAgIC56b29tKCkKICAgICAgICAuc2NhbGVFeHRlbnQoWzEgLyAyLCA4XSkKICAgICAgICAub24oJ3pvb20nLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICBkMy5zZWxlY3QoJ2cuY29udGFpbmVyJykKICAgICAgICAgICAgLmF0dHIoJ3RyYW5zZm9ybScsIGQzLmV2ZW50LnRyYW5zZm9ybSkKICAgICAgICB9KQogICAgICB0aGlzLnN2Zy5jYWxsKHpvb20pLm9uKCdkYmxjbGljay56b29tJywgbnVsbCkKICAgICAgdGhpcy5yb290ID0gdGhpcy5nZXRSb290KHRyZWVEYXRhKQogICAgICB0aGlzLnJvb3QueDAgPSAwCiAgICAgIHRoaXMucm9vdC55MCA9IDAKICAgICAgLy8gdGhpcy5yb290LmRlc2NlbmRhbnRzKCkuZm9yRWFjaCgoZCwgaSkgPT4gewogICAgICAvLyAgIGQuaWQgPSBpCiAgICAgIC8vICAgZC5fY2hpbGRyZW4gPSBkLmNoaWxkcmVuCiAgICAgIC8vICAgaWYgKGQuZGVwdGggJiYgZC5kYXRhLm5hbWUubGVuZ3RoICE9PSA3KSBkLmNoaWxkcmVuID0gbnVsbAogICAgICAvLyB9KQogICAgICB0aGlzLnVwZGF0ZSh0aGlzLnJvb3QpCiAgICB9LAogICAgZ2V0Um9vdCh0cmVlRGF0YSkgewogICAgICBsZXQgcm9vdCA9IGQzLmhpZXJhcmNoeSh0cmVlRGF0YSwgZCA9PiB7CiAgICAgICAgcmV0dXJuIGQuY2hpbGRyZW4KICAgICAgfSkKICAgICAgcm9vdC54MCA9IHRoaXMuaGVpZ2h0IC8gMgogICAgICAvLyByb290LngwID0gMAogICAgICByb290LnkwID0gMAogICAgICByZXR1cm4gcm9vdAogICAgfSwKICAgIGRibGNsaWNrTm9kZShkKSB7CiAgICAgIC8vIERvdWJsZSBjbGljayB0aGUgbm9kZSwgYW5kIGV4cGFuZCB0aGUgbm9kZSBpZiB0aGVyZSBhcmUgY2hpbGQgbm9kZXMKICAgICAgaWYgKGQuY2hpbGRyZW4pIHsKICAgICAgICB0aGlzLiRzZXQoZCwgJ19jaGlsZHJlbicsIGQuY2hpbGRyZW4pCiAgICAgICAgZC5jaGlsZHJlbiA9IG51bGwKICAgICAgfSBlbHNlIHsKICAgICAgICB0aGlzLiRzZXQoZCwgJ2NoaWxkcmVuJywgZC5fY2hpbGRyZW4pCiAgICAgICAgZC5fY2hpbGRyZW4gPSBudWxsCiAgICAgIH0KICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgIHRoaXMudXBkYXRlKGQpCiAgICAgIH0pCiAgICB9LAogICAgY2xpY2tOb2RlKCkgewogICAgICAvLyBjb25zb2xlLmxvZygnY2xpY2tOb2RlOiAnLCBkKQogICAgICAvLyB0aGlzLnNlbGVjdGVkTm9kZSA9IGQKICAgICAgLy8gaWYgKGQuY2hpbGRyZW4pIHsKICAgICAgLy8gICB0aGlzLiRzZXQoZCwgJ19jaGlsZHJlbicsIGQuY2hpbGRyZW4pCiAgICAgIC8vICAgZC5jaGlsZHJlbiA9IG51bGwKICAgICAgLy8gfSBlbHNlIHsKICAgICAgLy8gICB0aGlzLiRzZXQoZCwgJ2NoaWxkcmVuJywgZC5fY2hpbGRyZW4pCiAgICAgIC8vICAgZC5fY2hpbGRyZW4gPSBudWxsCiAgICAgIC8vIH0KICAgICAgLy8gdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAvLyAgIHRoaXMudXBkYXRlKGQpCiAgICAgIC8vIH0pCiAgICB9LAogICAgZGlhZ29uYWwocywgZCkgewogICAgICByZXR1cm4gYE0gJHtzLnl9ICR7cy54fQogICAgICAgICAgICAgIEMgJHsocy55ICsgZC55KSAvIDJ9ICR7cy54fSwKICAgICAgICAgICAgICAkeyhzLnkgKyBkLnkpIC8gMn0gJHtkLnh9LAogICAgICAgICAgICAgICR7ZC55fSAke2QueH1gCiAgICB9LAogICAgZ2V0Tm9kZXNBbmRMaW5rcygpIHsKICAgICAgdGhpcy5kVHJlZURhdGEgPSB0aGlzLnRyZWVtYXAodGhpcy5yb290KQogICAgICB0aGlzLm5vZGVzID0gdGhpcy5kVHJlZURhdGEuZGVzY2VuZGFudHMoKQogICAgICB0aGlzLmxpbmtzID0gdGhpcy5kVHJlZURhdGEuZGVzY2VuZGFudHMoKS5zbGljZSgxKQogICAgfSwKICAgIC8vIOaVsOaNruS4jkRvbei/m+ihjOe7keWumgogICAgdXBkYXRlKHNvdXJjZSkgewogICAgICAvLyBsZXQgc2VsZiA9IHRoaXMKICAgICAgdGhpcy5nZXROb2Rlc0FuZExpbmtzKCkKICAgICAgdGhpcy5ub2Rlcy5mb3JFYWNoKGQgPT4gewogICAgICAgIGQueSA9IGQuZGVwdGggKiAxODAKICAgICAgfSkKICAgICAgbGV0IG5vZGUgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3RBbGwoJ2cubm9kZScpLmRhdGEodGhpcy5ub2RlcywgZCA9PiB7CiAgICAgICAgcmV0dXJuIGQuaWQgfHwgKGQuaWQgPSArK3RoaXMuaW5kZXgpCiAgICAgIH0pCiAgICAgIC8vIEVudGVyIGFueSBuZXcgc291cmNlcyBhdCB0aGUgcGFyZW50J3MgcHJldmlvdXMgcG9zaXRpb24uCiAgICAgIGxldCBub2RlRW50ZXIgPSBub2RlCiAgICAgICAgLmVudGVyKCkKICAgICAgICAuYXBwZW5kKCdnJykKICAgICAgICAuYXR0cignY2xhc3MnLCAnbm9kZScpCiAgICAgICAgLm9uKCdjbGljaycsIHRoaXMuY2xpY2tOb2RlKQogICAgICAgIC5vbignZGJsY2xpY2snLCB0aGlzLmRibGNsaWNrTm9kZSkKICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgKCkgPT4gewogICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHNvdXJjZS55MCArICcsJyArIHNvdXJjZS54MCArICcpJwogICAgICAgIH0pCiAgICAgIC8vIEFkZCBjaXJjbGUgZm9yIHRoZSBub2RlcwogICAgICBub2RlRW50ZXIuYXBwZW5kKCdjaXJjbGUnKQogICAgICAgIC5hdHRyKCdjbGFzcycsICdub2RlJykKICAgICAgICAuYXR0cigncicsIDFlLTYpCiAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIC8vIGNvbnNvbGUubG9nKCdkIGZpbGw6ICcsIGQpCiAgICAgICAgICByZXR1cm4gZC5fY2hpbGRyZW4gPyAnI2M5ZTRmZicgOiAnI2ZmZicKICAgICAgICB9KQogICAgICAvLyBhZGQgY2lyY2xlIHNlbGVjdGlvbiBzdHlsZQogICAgICAvLyAub24oJ2NsaWNrJywgZnVuY3Rpb24gKGQpIHsKICAgICAgLy8gICBkMy5zZWxlY3QodGhpcykKICAgICAgLy8gICAgIC50cmFuc2l0aW9uKCkKICAgICAgLy8gICAgIC5kZWxheSgxKQogICAgICAvLyAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24gKCkgewogICAgICAvLyAgICAgICByZXR1cm4gJyM1NGE4ZmYnCiAgICAgIC8vICAgICB9KQogICAgICAvLyAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBmdW5jdGlvbiAoKSB7CiAgICAgIC8vICAgICAgIHJldHVybiAnNHB4JwogICAgICAvLyAgICAgfSkKICAgICAgLy8gICAvLyBzZWxmLnVwZGF0ZSh0aGlzKQogICAgICAvLyB9KQogICAgICBub2RlRW50ZXIKICAgICAgICAuYXBwZW5kKCd0ZXh0JykKICAgICAgICAuYXR0cignZHknLCAnLjM1ZW0nKQogICAgICAgIC5hdHRyKCd4JywgZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBkLmNoaWxkcmVuIHx8IGQuX2NoaWxkcmVuID8gLTEzIDogMTMKICAgICAgICB9KQogICAgICAgIC5hdHRyKCd0ZXh0LWFuY2hvcicsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gZC5jaGlsZHJlbiB8fCBkLl9jaGlsZHJlbiA/ICdlbmQnIDogJ3N0YXJ0JwogICAgICAgIH0pCiAgICAgICAgLnRleHQoZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBkLmRhdGEubmFtZS5sZW5ndGggPiAyMCA/IGQuZGF0YS5uYW1lLnN1YnN0cmluZygwLCAyMCkgKyAnLi4uJyA6IGQuZGF0YS5uYW1lCiAgICAgICAgfSkKICAgICAgICAuYXR0cignY2xhc3MnLCAndXBkYXRlJykKICAgICAgLy8gVHJhbnNpdGlvbiBub2RlcyB0byB0aGVpciBuZXcgcG9zaXRpb24uCiAgICAgIGxldCBub2RlVXBkYXRlID0gbm9kZUVudGVyCiAgICAgICAgLm1lcmdlKG5vZGUpCiAgICAgICAgLnRyYW5zaXRpb24oKQogICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKQogICAgICAgIC5hdHRyKCd0cmFuc2Zvcm0nLCBmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIGQueSArICcsJyArIGQueCArICcpJwogICAgICAgIH0pCiAgICAgIC8vIFVwZGF0ZSB0aGUgbm9kZSBhdHRyaWJ1dGVzIGFuZCBzdHlsZQogICAgICBub2RlVXBkYXRlLnNlbGVjdCgnY2lyY2xlLm5vZGUnKQogICAgICAgIC5hdHRyKCdyJywgMTApCiAgICAgICAgLnN0eWxlKCdmaWxsJywgZnVuY3Rpb24gKGQpIHsKICAgICAgICAgIHJldHVybiBkLl9jaGlsZHJlbiA/ICcjYzllNGZmJyA6ICcjZmZmJwogICAgICAgIH0pCiAgICAgICAgLnN0eWxlKCdzdHJva2Utd2lkdGgnLCBmdW5jdGlvbiAoKSB7CiAgICAgICAgICByZXR1cm4gJzJweCcKICAgICAgICB9KQogICAgICAgIC5hdHRyKCdjdXJzb3InLCAncG9pbnRlcicpCiAgICAgIG5vZGVVcGRhdGUuc2VsZWN0KCd0ZXh0Jykuc3R5bGUoJ2ZpbGwtb3BhY2l0eScsIDEpCiAgICAgIC8vIHVwZGF0ZSB0aGUgdGV4dAogICAgICBub2RlLnNlbGVjdCgndGV4dCcpCiAgICAgICAgLmF0dHIoJ2R5JywgJy4zNWVtJykKICAgICAgICAuYXR0cigneCcsIGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gZC5jaGlsZHJlbiB8fCBkLl9jaGlsZHJlbiA/IC0xMyA6IDEzCiAgICAgICAgfSkKICAgICAgICAuYXR0cigndGV4dC1hbmNob3InLCBmdW5jdGlvbiAoZCkgewogICAgICAgICAgcmV0dXJuIGQuY2hpbGRyZW4gfHwgZC5fY2hpbGRyZW4gPyAnZW5kJyA6ICdzdGFydCcKICAgICAgICB9KQogICAgICAgIC50ZXh0KGZ1bmN0aW9uIChkKSB7CiAgICAgICAgICByZXR1cm4gZC5kYXRhLm5hbWUubGVuZ3RoID4gMjAgPyBkLmRhdGEubmFtZS5zdWJzdHJpbmcoMCwgMjApICsgJy4uLicgOiBkLmRhdGEubmFtZQogICAgICAgIH0pCiAgICAgIC8vIFRyYW5zaXRpb24gZXhpdGluZyBub2RlcyB0byB0aGUgcGFyZW50J3MgbmV3IHBvc2l0aW9uLgogICAgICBsZXQgbm9kZUV4aXQgPSBub2RlCiAgICAgICAgLmV4aXQoKQogICAgICAgIC50cmFuc2l0aW9uKCkKICAgICAgICAuZHVyYXRpb24odGhpcy5kdXJhdGlvbikKICAgICAgICAuYXR0cigndHJhbnNmb3JtJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgcmV0dXJuICd0cmFuc2xhdGUoJyArIHNvdXJjZS55ICsgJywnICsgc291cmNlLnggKyAnKScKICAgICAgICB9KQogICAgICAgIC5yZW1vdmUoKQogICAgICBub2RlRXhpdC5zZWxlY3QoJ2NpcmNsZScpLmF0dHIoJ3InLCAxZS02KQogICAgICBub2RlRXhpdC5zZWxlY3QoJ3RleHQnKS5zdHlsZSgnZmlsbC1vcGFjaXR5JywgMWUtNikKICAgICAgLy8gKioqKioqKioqKioqKioqKioqKioqKioqKioqIExpbmtzIHNlY3Rpb24gKioqKioqKioqKioqKioqKioqKioqKioqKioqIC8vCiAgICAgIC8vIFVwZGF0ZSB0aGUgbGlua3PigKYKICAgICAgbGV0IGxpbmsgPSB0aGlzLmNvbnRhaW5lci5zZWxlY3RBbGwoJ3BhdGgubGluaycpLmRhdGEodGhpcy5saW5rcywgZCA9PiB7CiAgICAgICAgcmV0dXJuIGQuaWQKICAgICAgfSkKICAgICAgLy8gRW50ZXIgYW55IG5ldyBsaW5rcyBhdCB0aGUgcGFyZW50J3MgcHJldmlvdXMgcG9zaXRpb24uCiAgICAgIGxldCBsaW5rRW50ZXIgPSBsaW5rCiAgICAgICAgLmVudGVyKCkKICAgICAgICAuaW5zZXJ0KCdwYXRoJywgJ2cnKQogICAgICAgIC5hdHRyKCdjbGFzcycsICdsaW5rJykKICAgICAgICAuYXR0cignZCcsICgpID0+IHsKICAgICAgICAgIGxldCBvID0ge3g6IHNvdXJjZS54MCwgeTogc291cmNlLnkwfQogICAgICAgICAgcmV0dXJuIHRoaXMuZGlhZ29uYWwobywgbykKICAgICAgICB9KQogICAgICAgIC5hdHRyKCdmaWxsJywgJ25vbmUnKQogICAgICAgIC5hdHRyKCdzdHJva2Utd2lkdGgnLCAxKQogICAgICAgIC5hdHRyKCdzdHJva2UnLCAnI2NjYycpCiAgICAgIC8vIFRyYW5zaXRpb24gbGlua3MgdG8gdGhlaXIgbmV3IHBvc2l0aW9uLgogICAgICBsZXQgbGlua1VwZGF0ZSA9IGxpbmtFbnRlci5tZXJnZShsaW5rKQogICAgICBsaW5rVXBkYXRlCiAgICAgICAgLnRyYW5zaXRpb24oKQogICAgICAgIC5kdXJhdGlvbih0aGlzLmR1cmF0aW9uKQogICAgICAgIC5hdHRyKCdkJywgZCA9PiB7CiAgICAgICAgICByZXR1cm4gdGhpcy5kaWFnb25hbChkLCBkLnBhcmVudCkKICAgICAgICB9KQogICAgICAvLyBUcmFuc2l0aW9uIGV4aXRpbmcgbm9kZXMgdG8gdGhlIHBhcmVudCdzIG5ldyBwb3NpdGlvbi4KICAgICAgbGluawogICAgICAgIC5leGl0KCkKICAgICAgICAudHJhbnNpdGlvbigpCiAgICAgICAgLmR1cmF0aW9uKHRoaXMuZHVyYXRpb24pCiAgICAgICAgLmF0dHIoJ2QnLCAoKSA9PiB7CiAgICAgICAgICBsZXQgbyA9IHt4OiBzb3VyY2UueCwgeTogc291cmNlLnl9CiAgICAgICAgICByZXR1cm4gdGhpcy5kaWFnb25hbChvLCBvKQogICAgICAgIH0pCiAgICAgICAgLnJlbW92ZSgpCiAgICAgIC8vIFN0YXNoIHRoZSBvbGQgcG9zaXRpb25zIGZvciB0cmFuc2l0aW9uLgogICAgICB0aGlzLm5vZGVzLmZvckVhY2goZCA9PiB7CiAgICAgICAgZC54MCA9IGQueAogICAgICAgIGQueTAgPSBkLnkKICAgICAgfSkKICAgIH0KICB9Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappingsfile":"index.vue","sourceRoot":"src/views/ProcessTree","sourcesContent":["<template>\n  <div className=\"processtree\">\n    <svg className=\"processtree\">\n      <g className=\"container\"/>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\nexport default {\n  data() {\n    return {\n      index: 0,\n      duration: 750,\n      root: null,\n      nodes: [],\n      links: [],\n      dTreeData: null,\n      margin: {top: 20, right: 90, bottom: 30, left: 100},\n      selectedNode: null,\n      svg: null,\n      container: null\n    }\n  },\n  mounted() {\n    let treeData = {\n      'name': 'flare',\n      'children': [\n        {\n          'name': 'animate',\n          'children': [\n            {'name': 'Easing', 'value': 17010},\n            {'name': 'FunctionSequence', 'value': 5842},\n            {\n              'name': 'interpolate',\n              'children': [\n                {'name': 'ArrayInterpolator', 'value': 1983},\n                {'name': 'ColorInterpolator', 'value': 2047},\n                {'name': 'DateInterpolator', 'value': 1375},\n                {'name': 'Interpolator', 'value': 8746},\n                {'name': 'MatrixInterpolator', 'value': 2202},\n                {'name': 'NumberInterpolator', 'value': 1382},\n                {'name': 'ObjectInterpolator', 'value': 1629},\n                {'name': 'PointInterpolator', 'value': 1675},\n                {'name': 'RectangleInterpolator', 'value': 2042}\n              ]\n            },\n            {'name': 'ISchedulable', 'value': 1041},\n            {'name': 'Parallel', 'value': 5176},\n            {'name': 'Pause', 'value': 449},\n            {'name': 'Scheduler', 'value': 5593},\n            {'name': 'Sequence', 'value': 5534},\n            {'name': 'Transition', 'value': 9201},\n            {'name': 'Transitioner', 'value': 19975},\n            {'name': 'TransitionEvent', 'value': 1116},\n            {'name': 'Tween', 'value': 6006}\n          ]\n        },\n        {\n          'name': 'display',\n          'children': [\n            {'name': 'DirtySprite', 'value': 8833},\n            {'name': 'LineSprite', 'value': 1732},\n            {'name': 'RectSprite', 'value': 3623},\n            {'name': 'TextSprite', 'value': 10066}\n          ]\n        },\n        {\n          'name': 'flex',\n          'children': [\n            {'name': 'FlareVis', 'value': 4116}\n          ]\n        },\n        {\n          'name': 'physics',\n          'children': [\n            {'name': 'DragForce', 'value': 1082},\n            {'name': 'GravityForce', 'value': 1336},\n            {'name': 'IForce', 'value': 319},\n            {'name': 'NBodyForce', 'value': 10498},\n            {'name': 'Particle', 'value': 2822},\n            {'name': 'Simulation', 'value': 9983},\n            {'name': 'Spring', 'value': 2213},\n            {'name': 'SpringForce', 'value': 1681}\n          ]\n        },\n        {\n          'name': 'scale',\n          'children': [\n            {'name': 'IScaleMap', 'value': 2105},\n            {'name': 'LinearScale', 'value': 1316},\n            {'name': 'LogScale', 'value': 3151},\n            {'name': 'OrdinalScale', 'value': 3770},\n            {'name': 'QuantileScale', 'value': 2435},\n            {'name': 'QuantitativeScale', 'value': 4839},\n            {'name': 'RootScale', 'value': 1756},\n            {'name': 'Scale', 'value': 4268},\n            {'name': 'ScaleType', 'value': 1821},\n            {'name': 'TimeScale', 'value': 5833}\n          ]\n        }\n      ]\n    }\n    this.initSvg(treeData)\n  },\n  computed: {\n    treemap() {\n      return d3.tree().nodeSize([30, 60])\n    }\n  },\n  methods: {\n    initSvg(treeData) {\n      let clientWidth = document.body.clientWidth\n      let clientHeight = document.body.clientHeight\n      this.width = Math.floor(clientWidth * 0.6)\n      this.height = clientHeight - 72\n      let margin = ({top: 10, right: 120, bottom: 10, left: 100})\n      let width = this.width\n      // let dy = width / 4\n      let dx = 30\n      this.svg = d3\n        .select('svg.d3-tree-vii')\n        .attr('viewBox', [-margin.left, -margin.top, width, dx])\n      let translateTop = (this.height - 120) / 2\n      let transform = d3.zoomIdentity\n        .translate(this.margin.left, translateTop)\n        .scale(1)\n      console.log(transform) // eslint-disable-line\n      this.container = this.svg.select('g.container')\n      // init zoom behavior, which is both an object and function\n      let zoom = d3\n        .zoom()\n        .scaleExtent([1 / 2, 8])\n        .on('zoom', function () {\n          d3.select('g.container')\n            .attr('transform', d3.event.transform)\n        })\n      this.svg.call(zoom).on('dblclick.zoom', null)\n      this.root = this.getRoot(treeData)\n      this.root.x0 = 0\n      this.root.y0 = 0\n      // this.root.descendants().forEach((d, i) => {\n      //   d.id = i\n      //   d._children = d.children\n      //   if (d.depth && d.data.name.length !== 7) d.children = null\n      // })\n      this.update(this.root)\n    },\n    getRoot(treeData) {\n      let root = d3.hierarchy(treeData, d => {\n        return d.children\n      })\n      root.x0 = this.height / 2\n      // root.x0 = 0\n      root.y0 = 0\n      return root\n    },\n    dblclickNode(d) {\n      // Double click the node, and expand the node if there are child nodes\n      if (d.children) {\n        this.$set(d, '_children', d.children)\n        d.children = null\n      } else {\n        this.$set(d, 'children', d._children)\n        d._children = null\n      }\n      this.$nextTick(() => {\n        this.update(d)\n      })\n    },\n    clickNode() {\n      // console.log('clickNode: ', d)\n      // this.selectedNode = d\n      // if (d.children) {\n      //   this.$set(d, '_children', d.children)\n      //   d.children = null\n      // } else {\n      //   this.$set(d, 'children', d._children)\n      //   d._children = null\n      // }\n      // this.$nextTick(() => {\n      //   this.update(d)\n      // })\n    },\n    diagonal(s, d) {\n      return `M ${s.y} ${s.x}\n              C ${(s.y + d.y) / 2} ${s.x},\n              ${(s.y + d.y) / 2} ${d.x},\n              ${d.y} ${d.x}`\n    },\n    getNodesAndLinks() {\n      this.dTreeData = this.treemap(this.root)\n      this.nodes = this.dTreeData.descendants()\n      this.links = this.dTreeData.descendants().slice(1)\n    },\n    // 数据与Dom进行绑定\n    update(source) {\n      // let self = this\n      this.getNodesAndLinks()\n      this.nodes.forEach(d => {\n        d.y = d.depth * 180\n      })\n      let node = this.container.selectAll('g.node').data(this.nodes, d => {\n        return d.id || (d.id = ++this.index)\n      })\n      // Enter any new sources at the parent's previous position.\n      let nodeEnter = node\n        .enter()\n        .append('g')\n        .attr('class', 'node')\n        .on('click', this.clickNode)\n        .on('dblclick', this.dblclickNode)\n        .attr('transform', () => {\n          return 'translate(' + source.y0 + ',' + source.x0 + ')'\n        })\n      // Add circle for the nodes\n      nodeEnter.append('circle')\n        .attr('class', 'node')\n        .attr('r', 1e-6)\n        .style('fill', function (d) {\n          // console.log('d fill: ', d)\n          return d._children ? '#c9e4ff' : '#fff'\n        })\n      // add circle selection style\n      // .on('click', function (d) {\n      //   d3.select(this)\n      //     .transition()\n      //     .delay(1)\n      //     .style('fill', function () {\n      //       return '#54a8ff'\n      //     })\n      //     .style('stroke-width', function () {\n      //       return '4px'\n      //     })\n      //   // self.update(this)\n      // })\n      nodeEnter\n        .append('text')\n        .attr('dy', '.35em')\n        .attr('x', function (d) {\n          return d.children || d._children ? -13 : 13\n        })\n        .attr('text-anchor', function (d) {\n          return d.children || d._children ? 'end' : 'start'\n        })\n        .text(function (d) {\n          return d.data.name.length > 20 ? d.data.name.substring(0, 20) + '...' : d.data.name\n        })\n        .attr('class', 'update')\n      // Transition nodes to their new position.\n      let nodeUpdate = nodeEnter\n        .merge(node)\n        .transition()\n        .duration(this.duration)\n        .attr('transform', function (d) {\n          return 'translate(' + d.y + ',' + d.x + ')'\n        })\n      // Update the node attributes and style\n      nodeUpdate.select('circle.node')\n        .attr('r', 10)\n        .style('fill', function (d) {\n          return d._children ? '#c9e4ff' : '#fff'\n        })\n        .style('stroke-width', function () {\n          return '2px'\n        })\n        .attr('cursor', 'pointer')\n      nodeUpdate.select('text').style('fill-opacity', 1)\n      // update the text\n      node.select('text')\n        .attr('dy', '.35em')\n        .attr('x', function (d) {\n          return d.children || d._children ? -13 : 13\n        })\n        .attr('text-anchor', function (d) {\n          return d.children || d._children ? 'end' : 'start'\n        })\n        .text(function (d) {\n          return d.data.name.length > 20 ? d.data.name.substring(0, 20) + '...' : d.data.name\n        })\n      // Transition exiting nodes to the parent's new position.\n      let nodeExit = node\n        .exit()\n        .transition()\n        .duration(this.duration)\n        .attr('transform', function () {\n          return 'translate(' + source.y + ',' + source.x + ')'\n        })\n        .remove()\n      nodeExit.select('circle').attr('r', 1e-6)\n      nodeExit.select('text').style('fill-opacity', 1e-6)\n      // *************************** Links section *************************** //\n      // Update the links…\n      let link = this.container.selectAll('path.link').data(this.links, d => {\n        return d.id\n      })\n      // Enter any new links at the parent's previous position.\n      let linkEnter = link\n        .enter()\n        .insert('path', 'g')\n        .attr('class', 'link')\n        .attr('d', () => {\n          let o = {x: source.x0, y: source.y0}\n          return this.diagonal(o, o)\n        })\n        .attr('fill', 'none')\n        .attr('stroke-width', 1)\n        .attr('stroke', '#ccc')\n      // Transition links to their new position.\n      let linkUpdate = linkEnter.merge(link)\n      linkUpdate\n        .transition()\n        .duration(this.duration)\n        .attr('d', d => {\n          return this.diagonal(d, d.parent)\n        })\n      // Transition exiting nodes to the parent's new position.\n      link\n        .exit()\n        .transition()\n        .duration(this.duration)\n        .attr('d', () => {\n          let o = {x: source.x, y: source.y}\n          return this.diagonal(o, o)\n        })\n        .remove()\n      // Stash the old positions for transition.\n      this.nodes.forEach(d => {\n        d.x0 = d.x\n        d.y0 = d.y\n      })\n    }\n  }\n}\n</script>\n<style>\n.d3-tree-vii circle {\n  fill: #fff;\n  stroke: #54a8ff;\n  stroke-width: 2px;\n}\n\n.d3-tree-vii .node text {\n  font: 12px sans-serif;\n}\n\n.d3-tree-vii .link {\n  fill: none;\n  stroke: #ccc;\n  stroke-width: 2px;\n}\n</style>\n<style scoped>\n.width-100-percent {\n  width: 100%;\n  height: calc(100vh - 74px);\n}\n</style>\n"]}]}