{"remainingRequest":"/home/moryson/Desktop/project/vue-admin-template/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/moryson/Desktop/project/vue-admin-template/src/views/ProcessTree/index.vue?vue&type=style&index=1&id=527d0026&scoped=true&lang=css&","dependencies":[{"path":"/home/moryson/Desktop/project/vue-admin-template/src/views/ProcessTree/index.vue","mtime":1652806033901},{"path":"/home/moryson/Desktop/project/vue-admin-template/node_modules/css-loader/dist/cjs.js","mtime":1650942602836},{"path":"/home/moryson/Desktop/project/vue-admin-template/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1650942605432},{"path":"/home/moryson/Desktop/project/vue-admin-template/node_modules/postcss-loader/src/index.js","mtime":1650942603568},{"path":"/home/moryson/Desktop/project/vue-admin-template/node_modules/cache-loader/dist/cjs.js","mtime":1650942601504},{"path":"/home/moryson/Desktop/project/vue-admin-template/node_modules/vue-loader/lib/index.js","mtime":1650942604480}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCi53aWR0aC0xMDAtcGVyY2VudCB7CiAgd2lkdGg6IDEwMCU7CiAgaGVpZ2h0OiBjYWxjKDEwMHZoIC0gNzRweCk7Cn0K"},{"version":3,"sources":["index.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmWA;AACA;AACA;AACA","file":"index.vue","sourceRoot":"src/views/ProcessTree","sourcesContent":["<template>\n  <div className=\"processtree\">\n    <svg className=\"processtree\">\n      <g className=\"container\"/>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from 'd3'\n\nexport default {\n  data() {\n    return {\n      index: 0,\n      duration: 750,\n      root: null,\n      nodes: [],\n      links: [],\n      dTreeData: null,\n      margin: {top: 20, right: 90, bottom: 30, left: 100},\n      selectedNode: null,\n      svg: null,\n      container: null\n    }\n  },\n  mounted() {\n    let treeData = {\n      'name': 'flare',\n      'children': [\n        {\n          'name': 'animate',\n          'children': [\n            {'name': 'Easing', 'value': 17010},\n            {'name': 'FunctionSequence', 'value': 5842},\n            {\n              'name': 'interpolate',\n              'children': [\n                {'name': 'ArrayInterpolator', 'value': 1983},\n                {'name': 'ColorInterpolator', 'value': 2047},\n                {'name': 'DateInterpolator', 'value': 1375},\n                {'name': 'Interpolator', 'value': 8746},\n                {'name': 'MatrixInterpolator', 'value': 2202},\n                {'name': 'NumberInterpolator', 'value': 1382},\n                {'name': 'ObjectInterpolator', 'value': 1629},\n                {'name': 'PointInterpolator', 'value': 1675},\n                {'name': 'RectangleInterpolator', 'value': 2042}\n              ]\n            },\n            {'name': 'ISchedulable', 'value': 1041},\n            {'name': 'Parallel', 'value': 5176},\n            {'name': 'Pause', 'value': 449},\n            {'name': 'Scheduler', 'value': 5593},\n            {'name': 'Sequence', 'value': 5534},\n            {'name': 'Transition', 'value': 9201},\n            {'name': 'Transitioner', 'value': 19975},\n            {'name': 'TransitionEvent', 'value': 1116},\n            {'name': 'Tween', 'value': 6006}\n          ]\n        },\n        {\n          'name': 'display',\n          'children': [\n            {'name': 'DirtySprite', 'value': 8833},\n            {'name': 'LineSprite', 'value': 1732},\n            {'name': 'RectSprite', 'value': 3623},\n            {'name': 'TextSprite', 'value': 10066}\n          ]\n        },\n        {\n          'name': 'flex',\n          'children': [\n            {'name': 'FlareVis', 'value': 4116}\n          ]\n        },\n        {\n          'name': 'physics',\n          'children': [\n            {'name': 'DragForce', 'value': 1082},\n            {'name': 'GravityForce', 'value': 1336},\n            {'name': 'IForce', 'value': 319},\n            {'name': 'NBodyForce', 'value': 10498},\n            {'name': 'Particle', 'value': 2822},\n            {'name': 'Simulation', 'value': 9983},\n            {'name': 'Spring', 'value': 2213},\n            {'name': 'SpringForce', 'value': 1681}\n          ]\n        },\n        {\n          'name': 'scale',\n          'children': [\n            {'name': 'IScaleMap', 'value': 2105},\n            {'name': 'LinearScale', 'value': 1316},\n            {'name': 'LogScale', 'value': 3151},\n            {'name': 'OrdinalScale', 'value': 3770},\n            {'name': 'QuantileScale', 'value': 2435},\n            {'name': 'QuantitativeScale', 'value': 4839},\n            {'name': 'RootScale', 'value': 1756},\n            {'name': 'Scale', 'value': 4268},\n            {'name': 'ScaleType', 'value': 1821},\n            {'name': 'TimeScale', 'value': 5833}\n          ]\n        }\n      ]\n    }\n    this.initSvg(treeData)\n  },\n  computed: {\n    treemap() {\n      return d3.tree().nodeSize([30, 60])\n    }\n  },\n  methods: {\n    initSvg(treeData) {\n      let clientWidth = document.body.clientWidth\n      let clientHeight = document.body.clientHeight\n      this.width = Math.floor(clientWidth * 0.6)\n      this.height = clientHeight - 72\n      let margin = ({top: 10, right: 120, bottom: 10, left: 100})\n      let width = this.width\n      // let dy = width / 4\n      let dx = 30\n      this.svg = d3\n        .select('svg.d3-tree-vii')\n        .attr('viewBox', [-margin.left, -margin.top, width, dx])\n      let translateTop = (this.height - 120) / 2\n      let transform = d3.zoomIdentity\n        .translate(this.margin.left, translateTop)\n        .scale(1)\n      console.log(transform) // eslint-disable-line\n      this.container = this.svg.select('g.container')\n      // init zoom behavior, which is both an object and function\n      let zoom = d3\n        .zoom()\n        .scaleExtent([1 / 2, 8])\n        .on('zoom', function () {\n          d3.select('g.container')\n            .attr('transform', d3.event.transform)\n        })\n      this.svg.call(zoom).on('dblclick.zoom', null)\n      this.root = this.getRoot(treeData)\n      this.root.x0 = 0\n      this.root.y0 = 0\n      // this.root.descendants().forEach((d, i) => {\n      //   d.id = i\n      //   d._children = d.children\n      //   if (d.depth && d.data.name.length !== 7) d.children = null\n      // })\n      this.update(this.root)\n    },\n    getRoot(treeData) {\n      let root = d3.hierarchy(treeData, d => {\n        return d.children\n      })\n      root.x0 = this.height / 2\n      // root.x0 = 0\n      root.y0 = 0\n      return root\n    },\n    dblclickNode(d) {\n      // Double click the node, and expand the node if there are child nodes\n      if (d.children) {\n        this.$set(d, '_children', d.children)\n        d.children = null\n      } else {\n        this.$set(d, 'children', d._children)\n        d._children = null\n      }\n      this.$nextTick(() => {\n        this.update(d)\n      })\n    },\n    clickNode() {\n      // console.log('clickNode: ', d)\n      // this.selectedNode = d\n      // if (d.children) {\n      //   this.$set(d, '_children', d.children)\n      //   d.children = null\n      // } else {\n      //   this.$set(d, 'children', d._children)\n      //   d._children = null\n      // }\n      // this.$nextTick(() => {\n      //   this.update(d)\n      // })\n    },\n    diagonal(s, d) {\n      return `M ${s.y} ${s.x}\n              C ${(s.y + d.y) / 2} ${s.x},\n              ${(s.y + d.y) / 2} ${d.x},\n              ${d.y} ${d.x}`\n    },\n    getNodesAndLinks() {\n      this.dTreeData = this.treemap(this.root)\n      this.nodes = this.dTreeData.descendants()\n      this.links = this.dTreeData.descendants().slice(1)\n    },\n    // 数据与Dom进行绑定\n    update(source) {\n      // let self = this\n      this.getNodesAndLinks()\n      this.nodes.forEach(d => {\n        d.y = d.depth * 180\n      })\n      let node = this.container.selectAll('g.node').data(this.nodes, d => {\n        return d.id || (d.id = ++this.index)\n      })\n      // Enter any new sources at the parent's previous position.\n      let nodeEnter = node\n        .enter()\n        .append('g')\n        .attr('class', 'node')\n        .on('click', this.clickNode)\n        .on('dblclick', this.dblclickNode)\n        .attr('transform', () => {\n          return 'translate(' + source.y0 + ',' + source.x0 + ')'\n        })\n      // Add circle for the nodes\n      nodeEnter.append('circle')\n        .attr('class', 'node')\n        .attr('r', 1e-6)\n        .style('fill', function (d) {\n          // console.log('d fill: ', d)\n          return d._children ? '#c9e4ff' : '#fff'\n        })\n      // add circle selection style\n      // .on('click', function (d) {\n      //   d3.select(this)\n      //     .transition()\n      //     .delay(1)\n      //     .style('fill', function () {\n      //       return '#54a8ff'\n      //     })\n      //     .style('stroke-width', function () {\n      //       return '4px'\n      //     })\n      //   // self.update(this)\n      // })\n      nodeEnter\n        .append('text')\n        .attr('dy', '.35em')\n        .attr('x', function (d) {\n          return d.children || d._children ? -13 : 13\n        })\n        .attr('text-anchor', function (d) {\n          return d.children || d._children ? 'end' : 'start'\n        })\n        .text(function (d) {\n          return d.data.name.length > 20 ? d.data.name.substring(0, 20) + '...' : d.data.name\n        })\n        .attr('class', 'update')\n      // Transition nodes to their new position.\n      let nodeUpdate = nodeEnter\n        .merge(node)\n        .transition()\n        .duration(this.duration)\n        .attr('transform', function (d) {\n          return 'translate(' + d.y + ',' + d.x + ')'\n        })\n      // Update the node attributes and style\n      nodeUpdate.select('circle.node')\n        .attr('r', 10)\n        .style('fill', function (d) {\n          return d._children ? '#c9e4ff' : '#fff'\n        })\n        .style('stroke-width', function () {\n          return '2px'\n        })\n        .attr('cursor', 'pointer')\n      nodeUpdate.select('text').style('fill-opacity', 1)\n      // update the text\n      node.select('text')\n        .attr('dy', '.35em')\n        .attr('x', function (d) {\n          return d.children || d._children ? -13 : 13\n        })\n        .attr('text-anchor', function (d) {\n          return d.children || d._children ? 'end' : 'start'\n        })\n        .text(function (d) {\n          return d.data.name.length > 20 ? d.data.name.substring(0, 20) + '...' : d.data.name\n        })\n      // Transition exiting nodes to the parent's new position.\n      let nodeExit = node\n        .exit()\n        .transition()\n        .duration(this.duration)\n        .attr('transform', function () {\n          return 'translate(' + source.y + ',' + source.x + ')'\n        })\n        .remove()\n      nodeExit.select('circle').attr('r', 1e-6)\n      nodeExit.select('text').style('fill-opacity', 1e-6)\n      // *************************** Links section *************************** //\n      // Update the links…\n      let link = this.container.selectAll('path.link').data(this.links, d => {\n        return d.id\n      })\n      // Enter any new links at the parent's previous position.\n      let linkEnter = link\n        .enter()\n        .insert('path', 'g')\n        .attr('class', 'link')\n        .attr('d', () => {\n          let o = {x: source.x0, y: source.y0}\n          return this.diagonal(o, o)\n        })\n        .attr('fill', 'none')\n        .attr('stroke-width', 1)\n        .attr('stroke', '#ccc')\n      // Transition links to their new position.\n      let linkUpdate = linkEnter.merge(link)\n      linkUpdate\n        .transition()\n        .duration(this.duration)\n        .attr('d', d => {\n          return this.diagonal(d, d.parent)\n        })\n      // Transition exiting nodes to the parent's new position.\n      link\n        .exit()\n        .transition()\n        .duration(this.duration)\n        .attr('d', () => {\n          let o = {x: source.x, y: source.y}\n          return this.diagonal(o, o)\n        })\n        .remove()\n      // Stash the old positions for transition.\n      this.nodes.forEach(d => {\n        d.x0 = d.x\n        d.y0 = d.y\n      })\n    }\n  }\n}\n</script>\n<style>\n.d3-tree-vii circle {\n  fill: #fff;\n  stroke: #54a8ff;\n  stroke-width: 2px;\n}\n\n.d3-tree-vii .node text {\n  font: 12px sans-serif;\n}\n\n.d3-tree-vii .link {\n  fill: none;\n  stroke: #ccc;\n  stroke-width: 2px;\n}\n</style>\n<style scoped>\n.width-100-percent {\n  width: 100%;\n  height: calc(100vh - 74px);\n}\n</style>\n"]}]}